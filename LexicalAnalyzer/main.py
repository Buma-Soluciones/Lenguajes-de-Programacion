import lexerAnalyzer


if __name__ == '__main__':
    rules = [
        ("\bglobal\b",          'global'),
        ("\bint\b",             'int'),
        ("\bgetarg\b",          'getarg'),
        ("\bwrite\b",           'write'),
        ("\bif\b",              'if'),
        ("\bfi\b",              'fi'),
        ("\bP\b",             'P'),
        ("\bV\b",             'V'),
        ("\baf\b",             'af'),
        ("\band\b",             'and'),
        ("\bany\b",             'any'),
        ("\bbegin\b",             'begin'),
        ("\bbody\b",            'body'),
        ("\bbool\b",             'bool'),
        ("\bby\b",             'by'),
        ("\bcall\b",             'call'),
        ("\bcap\b",             'cap'),
        ("\bchar\b",             'char'),
        ("\bconst\b",             'const'),
        ("\bco\b",             'co'),
        ("\bcreate\b",             'create'),
        ("\bdestroy\b",             'destroy'),
        ("\bdownto\b",             'downto'),
        ("\bdo\b",             'do'),
        ("\belse\b",             'else'),
        ("\bend\b",             'end'),
        ("\benum\b",             'enum'),
        ("\bexit\b",             'exit'),
        ("\bextend\b",             'extend'),
        ("\bexternal\b",             'external'),
        ("\bfa\b",          'fa'),
        ("\bfile\b",          'file'),
        ("\bfinal\b",        'final'),
        ("\bforward\b",        'forward'),
        ("\bhigh\b",        'high'),
        ("\bimport\b",        'import'),
        ("\binitial\b",        'initial'),
        ("\bin\b",        'in'),
        ("\blow\b",        'low'),
        ("\bmod\b",             'mod'),
        ("\bnew\b",     'new'),
        ("\bnext\b",     'next'),
        ("\bni\b",     'ni'),
        ("\bnot\b",     'not'),
        ("\boc\b",     'oc'),
        ("\bod\b",     'od'),
        ("\bon\b",     'on'),
        ("\boptype\b",     'optype'),
        ("\bop\b",     'op'),
        ("\bor\b",     'or'),
        ("\bprocedure\b",     'procedure'),
        ("\bprocess\b",     'process'),
        ("\bproc\b",     'proc'),
        ("\bptr\b",     'ptr'),
        ("\breal\b",     'real'),
        ("\breceive\b",     'receive'),
        ("\brec\b",     'rec'),
        ("\bref\b",     'ref'),
        ("\breplay\b",     'replay'),
        ("\bresource\b",     'resource'),
        ("\bres\b",     'res'),
        ("\breturn\b",     'return'),
        ("\breturns\b",     'returns'),
        ("\bsem\b",     'sem'),
        ("\bsend\b",     'send'),
        ("\bseparate\b",     'separate'),
        ("\bskip\b",     'skip'),
        ("\bsuchthat\b",     'suchthat'),
        ("\bstop\b",            'stop'),
        ("\bstring\b",            'string'),
        ("\bto\b",            'to'),
        ("\btype\b",            'type'),
        ("\bunion\b",            'union'),
        ("\bval\b",            'val'),
        ("\bvar\b",             'var'),
        ("\bvm\b",         'vm'),
        ("\bxor\b",         'xor'),
        ("[0-9]+(?:\.[0-9]+)?(?:[eE][+-]?[0-9]+)?",            'tk_num'),
        ('\+',              'tk_suma'),
        ('\^',              'tk_exp'),
        ('\[]',              'tk_separa'),
        ('\{',              'tk_llave_izq'),
        ('\}',              'tk_llave_der'),
        ('->',               'tk_flecha'),
        ('\-',              'tk_resta'),
        ('\*',              'tk_mult'),
        ('\/',              'tk_div'),
        ('\(',              'tk_par_izq'),
        ('\)',              'tk_par_der'),
        (':=',              'tk_asign'),
        ('!=',              'tk_diferente'),
        ('=',               'tk_igual'),  
        (':',               'tk_dos_puntos'),
        (',',               'tk_coma'),
        (';',               'tk_ptocoma'),       
        ('\"(\\.|[^\\"])*\"',    'tk_string'),
        ("(#(.*?)[\r$]?\n).*",    'tk_comment'),
        ('[a-zA-Z_]\w*',    'id'),
    ]
    
    lx = lexerAnalyzer.LexerAnalizer(rules)
    f=open("entradas/prueba2.txt", "r")
    fline = f.readlines()
    row = 1
    for x in fline:
        
        lx.input(x, row)
        try:
            for tok in lx.tokens():
                print(tok)
        except Exception as err:
            print(err)
            break
        row += 1
        
    f.close
